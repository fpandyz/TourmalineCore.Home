# Here you can find docs bitnami/nginx chart https://github.com/bitnami/charts/blob/main/bitnami/nginx/README.md

image:
  registry: ghcr.io
  repository: fpandyz/tourmalinecore.home
  pullPolicy: Always
  debug: true

containerPorts:
  http: 3000
  https: ""

# 1000m means 100% of processor time 
# 1m means 0.1% of processor time.
# at start pod is being allocated with resources from requests, if it needs more consumption can grow until limits.
# if pod uses more resources than limits in spite of the reason kube-system will perform a forced restart
resources:
  limits:
    memory: 512Mi
  requests:
    cpu: 1m
    memory: 256Mi

replicaCount: 2

updateStrategy:
  # RollingUpdate strategy allows to update service without downtime (hopefully)
  rollingUpdate:
    maxUnavailable: 1
    maxSurge: 1

# Here you can read more about container probes https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  enabled: true
  path: /
  # initialDelaySeconds defines how many seconds after the container is started, the probes start
  initialDelaySeconds: 15
  # periodSeconds defines how long to wait before starting a new probe in case of a failed check
  periodSeconds: 5

readinessProbe:
  enabled: true
  path: /
  initialDelaySeconds: 15
  periodSeconds: 5

service:
  type: ClusterIP
  ports:
    http: 3000
    https: ""

ingress:
  enabled: true
  path: ""
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt 
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  ingressClassName: "nginx"
  tls: true

# not needed in this setup
serviceAccount:
  create: false

# not needed in this setup
networkPolicy:
  enabled: false

# CUSTOM: Here you store non secret env vars that will be passed to the pod's environment
extraConfigMapEnvVars: {}

# this is needed to tell the container to read extra env vars from the dedicated Config Map that we create in extraDeploy
extraEnvVarsCM: "{{ include \"common.names.fullname\" . }}"

extraDeploy:
  # this creates Config Map from extraConfigMapEnvVars to be able to calculate checksum/config hash by env vars
  - |
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: {{ include "common.names.fullname" . }}
      namespace: {{ include "common.names.namespace" . | quote }}
      labels: {{- include "common.labels.standard" . | nindent 6 }}
        {{- if .Values.commonLabels }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 6 }}
        {{- end }}
      {{- if .Values.commonAnnotations }}
      annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 6 }}
      {{- end }}
    data:
      {{- if .Values.extraConfigMapEnvVars }}
      {{- include "common.tplvalues.render" ( dict "value" .Values.extraConfigMapEnvVars "context" $ ) | trim | nindent 6 }}
      {{- end }}
